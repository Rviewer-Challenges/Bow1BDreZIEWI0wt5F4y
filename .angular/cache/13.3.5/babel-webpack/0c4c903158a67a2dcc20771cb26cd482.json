{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"card\"];\nconst _c1 = [\"boardGame\"];\n\nfunction BoardGameComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 6, 7);\n    i0.ɵɵlistener(\"click\", function BoardGameComponent_div_5_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const option_r2 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.addRotateCard(option_r2.id);\n    });\n    i0.ɵɵelementStart(2, \"div\", 8);\n    i0.ɵɵelement(3, \"img\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 10);\n    i0.ɵɵelement(5, \"img\", 11);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵclassMapInterpolate1(\"card \", option_r2.imagen, \"\");\n    i0.ɵɵpropertyInterpolate(\"id\", option_r2.id);\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"src\", option_r2.imagen, i0.ɵɵsanitizeUrl);\n  }\n}\n\nexport let BoardGameComponent = /*#__PURE__*/(() => {\n  class BoardGameComponent {\n    constructor(elementRef, renderer) {\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.getChosenLevel = 0;\n      this.sendShowChooseLevel = new EventEmitter();\n      this.firstMove = false;\n      this.firstCardId = '';\n      this.secondCardId = '';\n      this.flipCardCount = 0;\n      this.attempts = 0;\n      this.isMatched = 0;\n      this.newArray = [];\n      this.newArrayLength = 0;\n      this.loseGame = false;\n      this.imgArray = [{\n        imagen: 'assets/img/morty1.png',\n        pos: '1',\n        id: '1'\n      }, {\n        imagen: 'assets/img/morty2.png',\n        pos: '2',\n        id: '2'\n      }, {\n        imagen: 'assets/img/morty3.png',\n        pos: '3',\n        id: '3'\n      }, {\n        imagen: 'assets/img/morty4.png',\n        pos: '4',\n        id: '4'\n      }, {\n        imagen: 'assets/img/morty5.png',\n        pos: '5',\n        id: '5'\n      }, {\n        imagen: 'assets/img/morty6.png',\n        pos: '6',\n        id: '6'\n      }, {\n        imagen: 'assets/img/morty7.png',\n        pos: '7',\n        id: '7'\n      }, {\n        imagen: 'assets/img/morty8.png',\n        pos: '8',\n        id: '8'\n      }, {\n        imagen: 'assets/img/morty9.png',\n        pos: '9',\n        id: '9'\n      }, {\n        imagen: 'assets/img/morty10.png',\n        pos: '10',\n        id: '10'\n      }, {\n        imagen: 'assets/img/morty11.png',\n        pos: '11',\n        id: '11'\n      }, {\n        imagen: 'assets/img/morty12.png',\n        pos: '12',\n        id: '12'\n      }, {\n        imagen: 'assets/img/morty13.png',\n        pos: '13',\n        id: '13'\n      }, {\n        imagen: 'assets/img/morty14.png',\n        pos: '14',\n        id: '14'\n      }, {\n        imagen: 'assets/img/morty15.png',\n        pos: '15',\n        id: '15'\n      }, {\n        imagen: 'assets/img/morty16.png',\n        pos: '16',\n        id: '16'\n      }, {\n        imagen: 'assets/img/morty17.png',\n        pos: '17',\n        id: '17'\n      }, {\n        imagen: 'assets/img/morty18.png',\n        pos: '18',\n        id: '18'\n      }, {\n        imagen: 'assets/img/morty19.png',\n        pos: '19',\n        id: '19'\n      }, {\n        imagen: 'assets/img/morty20.png',\n        pos: '20',\n        id: '20'\n      }, {\n        imagen: 'assets/img/morty21.png',\n        pos: '21',\n        id: '21'\n      }];\n    }\n\n    ngOnInit() {\n      this.fisherYatesShuffle(this.imgArray);\n      let arraySlice = this.imgArray.slice(0, this.getChosenLevel);\n\n      for (let index = 0; index < arraySlice.length; index++) {\n        this.newArray.push(arraySlice[index]);\n        this.newArray.push({\n          imagen: arraySlice[index].imagen,\n          pos: arraySlice[index].pos,\n          id: String(Number(arraySlice[index].id) * 100)\n        });\n      }\n\n      this.newArrayLength = this.newArray.length / 2;\n      this.fisherYatesShuffle(this.newArray);\n    }\n\n    ngAfterViewInit() {\n      if (window.matchMedia(\"(max-width: 450px\").matches == true) {\n        if (this.getChosenLevel == 8) {\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateColumns', 'repeat(4, auto)');\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateRows', 'repeat(4,auto)');\n        } else if (this.getChosenLevel == 12) {\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateColumns', 'repeat(4, auto)');\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateRows', 'repeat(6,auto)');\n        } else if (this.getChosenLevel == 15) {\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateColumns', 'repeat(5, auto)');\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateRows', 'repeat(6, auto)');\n        }\n      } else if (window.matchMedia(\"(max-width: 950px) and (orientation: landscape)\").matches == true) {\n        if (this.getChosenLevel == 8) {\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateColumns', 'repeat(8, auto)');\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateRows', 'repeat(2,auto)');\n        } else if (this.getChosenLevel == 12) {\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateColumns', 'repeat(8, auto)');\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateRows', 'repeat(3,auto)');\n        } else if (this.getChosenLevel == 15) {\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateColumns', 'repeat(10, auto)');\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateRows', 'repeat(3, auto)');\n        }\n      } else {\n        if (this.getChosenLevel == 8) {\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateColumns', 'repeat(4, auto)');\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateRows', 'repeat(4,auto)');\n        } else if (this.getChosenLevel == 12) {\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateColumns', 'auto auto auto auto auto auto');\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateRows', 'auto auto auto auto');\n        } else if (this.getChosenLevel == 15) {\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateColumns', 'auto auto auto auto auto auto');\n          this.renderer.setStyle(this.boardGame.nativeElement, 'gridTemplateRows', 'auto auto auto auto auto');\n        }\n      }\n    }\n\n    ngDoCheck() {\n      if (this.loseGame) {\n        const getCards = this.elementRef.nativeElement.getElementsByClassName('card');\n\n        for (let index = 0; index < getCards.length; index++) {\n          this.renderer.setStyle(getCards[index].children[0], 'backgroundColor', 'red');\n          this.renderer.setStyle(getCards[index].children[1], 'backgroundColor', 'red');\n        }\n      }\n    }\n\n    getLoseGame(e) {\n      this.loseGame = e;\n    }\n\n    fisherYatesShuffle(arr) {\n      for (var i = arr.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1)); //random index\n\n        [arr[i], arr[j]] = [arr[j], arr[i]]; // swap\n      }\n    }\n\n    addRotateCard(id) {\n      if (!this.loseGame) {\n        const getCard = document.getElementById(id);\n        this.renderer.addClass(getCard.children[0], 'rotateFront');\n        this.renderer.addClass(getCard.children[1], 'rotateBack');\n        this.renderer.setStyle(getCard, 'pointerEvents', 'none');\n\n        if (!this.firstMove) {\n          this.firstMove = true;\n        }\n\n        if (this.flipCardCount == 0) {\n          this.firstCard = getCard.classList[0];\n          this.firstCardId = getCard.id;\n          this.flipCardCount++;\n        } else if (this.flipCardCount == 1) {\n          this.secondCard = getCard.classList[0];\n          this.secondCardId = getCard.id;\n          this.flipCardCount++;\n          const getCards = this.elementRef.nativeElement.getElementsByClassName('card');\n\n          for (let index = 0; index < getCards.length; index++) {\n            this.renderer.setStyle(getCards[index], 'pointerEvents', 'none');\n          }\n\n          setTimeout(() => {\n            this.checkMatch();\n          }, 1000);\n        } else {\n          this.flipCardCount = 0;\n        }\n      }\n    }\n\n    checkMatch() {\n      const getFirstCard = document.getElementById(this.firstCardId);\n      const getSecondCard = document.getElementById(this.secondCardId);\n\n      if (this.firstCard != this.secondCard || this.firstCardId == this.secondCardId) {\n        this.renderer.removeClass(getFirstCard.children[0], 'rotateFront');\n        this.renderer.removeClass(getFirstCard.children[1], 'rotateBack');\n        this.renderer.removeClass(getSecondCard.children[0], 'rotateFront');\n        this.renderer.removeClass(getSecondCard.children[1], 'rotateBack');\n        this.attempts++;\n      }\n\n      if (this.firstCard == this.secondCard && this.firstCardId != this.secondCardId) {\n        this.isMatched++;\n        this.attempts++;\n        this.renderer.addClass(getFirstCard, 'match');\n        this.renderer.addClass(getSecondCard, 'match');\n      }\n\n      if (this.flipCardCount == 2) {\n        this.flipCardCount = 0;\n        this.firstCard, this.secondCard, this.firstCardId, this.secondCardId = '';\n      }\n\n      const getCards = this.elementRef.nativeElement.getElementsByClassName('card');\n\n      for (let index = 0; index < getCards.length; index++) {\n        if (this.isMatched == this.newArrayLength) {\n          this.renderer.setStyle(getCards[index], 'pointerEvents', 'none');\n          this.renderer.setStyle(getCards[index].children[1], 'backgroundColor', 'lawngreen');\n        } else if (!getCards[index].classList.contains('match')) {\n          this.renderer.setStyle(getCards[index], 'pointerEvents', 'auto');\n        }\n      }\n    }\n\n  }\n\n  BoardGameComponent.ɵfac = function BoardGameComponent_Factory(t) {\n    return new (t || BoardGameComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  BoardGameComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BoardGameComponent,\n    selectors: [[\"app-board-game\"]],\n    viewQuery: function BoardGameComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.card = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.boardGame = _t.first);\n      }\n    },\n    inputs: {\n      getChosenLevel: \"getChosenLevel\"\n    },\n    outputs: {\n      sendShowChooseLevel: \"sendShowChooseLevel\"\n    },\n    decls: 6,\n    vars: 6,\n    consts: [[\"id\", \"container\"], [\"id\", \"bar-info\"], [3, \"getAttempts\", \"getIsMatched\", \"getArrayLength\", \"getFirstMove\", \"sendShowChooseLevel\", \"sendLoseGame\"], [\"id\", \"board-game\"], [\"boardGame\", \"\"], [3, \"class\", \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"id\", \"click\"], [\"card\", \"\"], [1, \"front\"], [\"src\", \"assets/img/front.png\", \"alt\", \"\"], [1, \"back\"], [\"alt\", \"\", 3, \"src\"]],\n    template: function BoardGameComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"app-info-game\", 2);\n        i0.ɵɵlistener(\"sendLoseGame\", function BoardGameComponent_Template_app_info_game_sendLoseGame_2_listener($event) {\n          return ctx.getLoseGame($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"div\", 3, 4);\n        i0.ɵɵtemplate(5, BoardGameComponent_div_5_Template, 6, 5, \"div\", 5);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"getAttempts\", ctx.attempts)(\"getIsMatched\", ctx.isMatched)(\"getArrayLength\", ctx.newArrayLength)(\"getFirstMove\", ctx.firstMove)(\"sendShowChooseLevel\", ctx.sendShowChooseLevel);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.newArray);\n      }\n    },\n    styles: [\"#container[_ngcontent-%COMP%]{margin-top:30px}#bar-info[_ngcontent-%COMP%]{display:flex;justify-content:center;margin-bottom:30px}#board-game[_ngcontent-%COMP%]{display:grid;justify-content:center;align-items:center;margin-bottom:5px}.card[_ngcontent-%COMP%]{position:relative;width:140px;height:140px;border:1px solid #00ff33;box-shadow:0 0 2.5px #0f3,0 0 2.5px #0f3,0 0 5px #04f466,0 0 5px #04f466,0 0 5px #04f466}.card[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;display:flex;align-items:center;justify-content:center;-webkit-backface-visibility:hidden;backface-visibility:hidden;transition:1s}img[_ngcontent-%COMP%]{width:auto;height:130px}.card[_ngcontent-%COMP%]   .front[_ngcontent-%COMP%]{background-color:#682fc4;transform:perspective(500px) rotateY(0)}.card[_ngcontent-%COMP%]   .back[_ngcontent-%COMP%]{background:#00b2c8;transform:perspective(500px) rotateY(180deg)}.card[_ngcontent-%COMP%]   .rotateFront[_ngcontent-%COMP%]{transform:perspective(500px) rotateY(180deg)}.card[_ngcontent-%COMP%]   .rotateBack[_ngcontent-%COMP%]{transform:perspective(500px) rotateY(360deg)}@media screen and (max-width: 1500px) and (orientation: portrait){.card[_ngcontent-%COMP%]{width:80px;height:80px}img[_ngcontent-%COMP%]{height:75px}}@media screen and (max-width: 450px) and (orientation: portrait){#container[_ngcontent-%COMP%]{margin-top:30px}.card[_ngcontent-%COMP%]{width:65px;height:65px}img[_ngcontent-%COMP%]{height:60px}#bar-info[_ngcontent-%COMP%]{margin-bottom:40px}#btn-back[_ngcontent-%COMP%]{font-size:1em;width:120px}}@media screen and (max-width: 950px) and (orientation: landscape){#container[_ngcontent-%COMP%]{margin-top:5px}#bar-info[_ngcontent-%COMP%]{margin-bottom:5px}.card[_ngcontent-%COMP%]{width:62px;height:62px}img[_ngcontent-%COMP%]{height:60px}}\"]\n  });\n  return BoardGameComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}